<?php

namespace ReportBundle\Repository;

use AccountBundle\Entity\Operation;
use ClassBundle\Entity\InternalAccount;
use \Doctrine\ORM\EntityRepository;
use MemberBundle\Entity\Member;
use ReportBundle\Entity\GeneralLedgerBalance;
use UserBundle\Entity\Utilisateur;

/**
 * GeneralLedgerBalanceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GeneralLedgerBalanceRepository extends EntityRepository
{
    /**
     * @param $amount
     * @param Utilisateur $currentUser
     * @param $dateOperation
     * @param InternalAccount $account
     * @param $representative
     * @param Member $member
     * @return GeneralLedgerBalance
     */
    public function registerGBLCashIn($amount ,Utilisateur $currentUser, $dateOperation, InternalAccount $account, $representative, Member $member = null)
    {
        // Update the general Ledger
        $entityManager = $this->getEntityManager();
        $ledgerBalance = new GeneralLedgerBalance();
        $ledgerBalance->setDebit($amount);
        $ledgerBalance->setCurrentUser($currentUser);
        $ledgerBalance->setDateOperation($dateOperation);
        $latestEntryGBL = $this->findLastGBLRecord();
        if ($latestEntryGBL) {
            $ledgerBalance->setBalance($latestEntryGBL->getBalance() + $amount);
        }else{
            $ledgerBalance->setBalance($amount);
        }
        $ledgerBalance->setTypeOperation(Operation::TYPE_CASH_IN);
        $ledgerBalance->setAccount($account);
        $ledgerBalance->setAccountTitle($account->getAccountName());
        $ledgerBalance->setRepresentative($representative);
        if($member) {
            $ledgerBalance->setMember($member);
        }
        $ledgerBalance->setAccountBalance($account->getBalance());
        /*Make record*/
        $entityManager->persist($ledgerBalance);

        return $ledgerBalance;
    }

    /**
     * @param $amount
     * @param Utilisateur $currentUser
     * @param $dateOperation
     * @param InternalAccount $account
     * @param $representative
     * @return GeneralLedgerBalance
     */
    public function registerGBLCashOut($amount ,Utilisateur $currentUser, $dateOperation, InternalAccount $account, $representative)
    {
        $entityManager = $this->getEntityManager();
        $ledgerBalance = new GeneralLedgerBalance();
        $ledgerBalance->setCredit($amount);
        $ledgerBalance->setCurrentUser($currentUser);
        $ledgerBalance->setDateOperation($dateOperation);
        $latestEntryGBL = $this->findLastGBLRecord();
        if ($latestEntryGBL) {
            $ledgerBalance->setBalance($latestEntryGBL->getBalance() - $amount);
        }else{
            $ledgerBalance->setBalance($amount);
        }
        $ledgerBalance->setTypeOperation(Operation::TYPE_CASH_OUT);
        $ledgerBalance->setAccount($account);
        $ledgerBalance->setAccountTitle($account->getAccountName());
        $ledgerBalance->setRepresentative($representative);
        $ledgerBalance->setAccountBalance($account->getBalance());
        /*Make record*/
        $entityManager->persist($ledgerBalance);

        return $ledgerBalance;
    }

    public function findLastGBLRecord() {
        $qb = $this->createQueryBuilder('gbl');
        $qb->setMaxResults( 1 );
        $qb->orderBy('gbl.id', 'DESC');

        return $qb->getQuery()->getSingleResult();
    }

    /**
     * @param Utilisateur $currentUser
     * @param Member $member
     * @param $representative
     * @param $date
     * @param $amount
     * @param InternalAccount $savingAccount
     * @return bool
     */
    public function recordGeneraLB(Utilisateur $currentUser, Member $member, $representative, $date, $amount, InternalAccount $savingAccount)
    {
        $entityManager = $this->getEntityManager();
        $ledgerBalance = new GeneralLedgerBalance();
        $ledgerBalance->setTypeOperation(Operation::TYPE_CASH_OUT);
        $ledgerBalance->setCurrentUser($currentUser);
        $ledgerBalance->setDateOperation($date);
        $ledgerBalance->setCredit($amount);
        $latestEntryGBL = $this->findLastGBLRecord();
        if ($latestEntryGBL) {
            $ledgerBalance->setBalance($latestEntryGBL->getBalance() - $amount);
        }else{
            $ledgerBalance->setBalance($amount);
        }
        $ledgerBalance->setAccount($savingAccount);
        $ledgerBalance->setRepresentative($representative);
        $ledgerBalance->setAccountBalance($savingAccount->getBalance());
        $ledgerBalance->setAccountTitle($savingAccount->getAccountName()." A/C_".$member->getMemberNumber());
        $ledgerBalance->setMember($member);

        $entityManager->persist($ledgerBalance);
        $entityManager->flush();
        return true;
    }

    /**
     * @param Utilisateur $currentUser
     * @param Member $member
     * @param $representative
     * @param $date
     * @param $amount
     * @param InternalAccount $account
     * @return bool
     */
    public function recordGeneraLBIn(Utilisateur $currentUser, Member $member, $representative, $date, $amount, InternalAccount $account)
    {
        $entityManager = $this->getEntityManager();
        $ledgerBalance = new GeneralLedgerBalance();
        $ledgerBalance->setTypeOperation(Operation::TYPE_CASH_IN);
        $ledgerBalance->setCurrentUser($currentUser);
        $ledgerBalance->setDateOperation($date);
        $ledgerBalance->setDebit($amount);
        $latestEntryGBL = $this->findLastGBLRecord();
        if ($latestEntryGBL) {
            $ledgerBalance->setBalance($latestEntryGBL->getBalance() + $amount);
        }else{
            $ledgerBalance->setBalance($amount);
        }
        $ledgerBalance->setAccount($account);
        $ledgerBalance->setRepresentative($representative);
        $ledgerBalance->setAccountBalance($account->getBalance());
        $ledgerBalance->setAccountTitle($account->getAccountName()." A/C_".$member->getMemberNumber());
        $ledgerBalance->setMember($member);

        $entityManager->persist($ledgerBalance);

        $entityManager->flush();
        return true;
    }
}

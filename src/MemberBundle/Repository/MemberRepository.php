<?php

namespace MemberBundle\Repository;

use AccountBundle\Entity\Operation;
use ClassBundle\Entity\InternalAccount;
use Doctrine\ORM\EntityRepository;
use MemberBundle\Entity\Member;
use ReportBundle\Entity\GeneralLedgerBalance;
use UserBundle\Entity\Utilisateur;

/**
 * MemberRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MemberRepository extends EntityRepository
{

    /**
     * @return array
     */
    public function getActiveMembers()
    {
        $members = $this->createQueryBuilder('m')
            ->where('m.share != 0')
            ->orderBy('m.memberNumber', 'ASC')
            ->getQuery()
            ->getResult();

        return $members;
    }

    /**
     * @param $date
     * @return array
     */
    public function getMemberRegisteredBefore($date)
    {
        $members = $this->createQueryBuilder('m')
            ->where('m.membershipDateCreation <= :date')
            ->orderBy('m.memberNumber', 'ASC')
            ->setParameters([
                'date' => $date
            ])
            ->getQuery()
            ->getResult();

        return $members;
    }

    /**
     * @return array
     */
    public function getAllInActiveMembers()
    {
        $members = $this->createQueryBuilder('m')
            ->where('m.share = 0')
            ->orderBy('m.memberNumber', 'ASC')
            ->getQuery()
            ->getResult();

        return $members;
    }

    /**
     * @return array
     */
    public function getFoundingMembers()
    {
        $members = $this->createQueryBuilder('m')
            ->orderBy('m.memberNumber', 'ASC')
            ->getQuery()
            ->setMaxResults(30)
            ->getResult();

        return $members;
    }

    /**
     * @param Utilisateur $currentUser
     * @param \DateTime $dateTime
     * @param Member $member
     * @param $savings
     * @param $representative
     * @return Operation
     */
    public function saveMemberSavingsOperation(Utilisateur $currentUser, \DateTime $dateTime, Member $member, $savings, $representative)
    {
        $operation = new Operation();
        $operation->setCurrentUser($currentUser);
        $operation->setDateOperation($dateTime);
        $operation->setTypeOperation(Operation::TYPE_CASH_IN);
        $operation->setAmount($savings);
        $operation->setMember($member);
        $operation->setRepresentative($representative);
        $operation->setIsSaving(true);
        $operation->setBalance($member->getSaving() + $savings);
        $this->getEntityManager()->persist($operation);
        return $operation;
    }

    /**
     * @param $savings
     * @param Utilisateur $currentUser
     * @param \DateTime $dateOperation
     * @param InternalAccount $memberSavings
     * @param Member $member
     * @param $representative
     */
    public function saveMemberSavingsInGeneralLedger($savings, Utilisateur $currentUser, \DateTime $dateOperation, InternalAccount $memberSavings, Member $member, $representative)
    {
        $entityManager = $this->getEntityManager();
        $ledgerBalance = new GeneralLedgerBalance();
        $ledgerBalance->setDebit($savings);
        $ledgerBalance->setCurrentUser($currentUser);
        $ledgerBalance->setDateOperation($dateOperation);
        $latestEntryGBL = $entityManager->getRepository(GeneralLedgerBalance::class)->findOneBy([],['id' => 'DESC']);
        if ($latestEntryGBL) {
            $ledgerBalance->setBalance($latestEntryGBL->getBalance() + $savings);
        }else{
            $ledgerBalance->setBalance($savings);
        }
        $ledgerBalance->setTypeOperation(Operation::TYPE_CASH_IN);
        $ledgerBalance->setAccount($memberSavings);
        $ledgerBalance->setRepresentative($representative);
        $ledgerBalance->setAccountBalance($memberSavings->getBalance());
        $ledgerBalance->setAccountTitle($memberSavings->getAccountName()." A/C ".$member->getMemberNumber());
        $ledgerBalance->setMember($member);
        $entityManager->persist($ledgerBalance);
    }

    /**
     * @param Utilisateur $currentUser
     * @param \DateTime $dateOperation
     * @param Member $member
     * @param $shares
     * @param $representative
     * @return Operation
     */
    public function saveMemberSharesOperation(Utilisateur $currentUser, \DateTime $dateOperation, Member $member, $shares, $representative)
    {
        $operationShare = new Operation();
        $operationShare->setCurrentUser($currentUser);
        $operationShare->setDateOperation($dateOperation);
        $operationShare->setTypeOperation(Operation::TYPE_CASH_IN);
        $operationShare->setAmount($shares);
        $operationShare->setIsShare(true);
        $operationShare->setMember($member);
        $operationShare->setRepresentative($representative);
        $operationShare->setBalance($member->getShare() + $shares);
        $this->getEntityManager()->persist($operationShare);
        return $operationShare;
    }

    /**
     * @param $shares
     * @param Utilisateur $currentUser
     * @param \DateTime $dateOperation
     * @param InternalAccount $memberShares
     * @param Member $member
     * @param $representative
     */
    public function saveMemberSharesInGeneralLedger($shares, Utilisateur $currentUser, \DateTime $dateOperation, InternalAccount $memberShares, Member $member, $representative)
    {
        $entityManager = $this->getEntityManager();
        $ledgerBalanceSha = new GeneralLedgerBalance();
        $ledgerBalanceSha->setDebit($shares);
        $ledgerBalanceSha->setCurrentUser($currentUser);
        $ledgerBalanceSha->setDateOperation($dateOperation);
        $latestEntryGBL = $entityManager->getRepository('ReportBundle:GeneralLedgerBalance')->findOneBy([],['id' => 'DESC']);
        if ($latestEntryGBL) {
            $ledgerBalanceSha->setBalance($latestEntryGBL->getBalance() + $shares);
        }else{
            $ledgerBalanceSha->setBalance($shares);
        }
        $ledgerBalanceSha->setTypeOperation(Operation::TYPE_CASH_IN);
        $ledgerBalanceSha->setAccount($memberShares);
        $ledgerBalanceSha->setRepresentative($representative);
        $ledgerBalanceSha->setAccountBalance($memberShares->getBalance());
        $ledgerBalanceSha->setAccountTitle($memberShares->getAccountName()." A/C ".$member->getMemberNumber());
        $ledgerBalanceSha->setMember($member);
        $entityManager->persist($ledgerBalanceSha);
    }

    /**
     * @param Utilisateur $currentUser
     * @param \DateTime $dateOperation
     * @param Member $member
     * @param $deposits
     * @param $representative
     * @return Operation
     */
    public function saveMemberDepositsOperation(Utilisateur $currentUser, \DateTime $dateOperation, Member $member, $deposits, $representative)
    {
        $operationDeposit = new Operation();
        $operationDeposit->setCurrentUser($currentUser);
        $operationDeposit->setDateOperation($dateOperation);
        $operationDeposit->setTypeOperation(Operation::TYPE_CASH_IN);
        $operationDeposit->setAmount($deposits);
        $operationDeposit->setIsDeposit(true);
        $operationDeposit->setMember($member);
        $operationDeposit->setRepresentative($representative);
        $operationDeposit->setBalance($member->getDeposit() + $deposits);
        $this->getEntityManager()->persist($operationDeposit);
        return $operationDeposit;
    }

    /**
     * @param $deposits
     * @param Utilisateur $currentUser
     * @param \DateTime $dateOperation
     * @param InternalAccount $memberDeposits
     * @param Member $member
     * @param $representative
     */
    public function saveMemberDepositInGeneralLedger($deposits, Utilisateur $currentUser, \DateTime $dateOperation, InternalAccount $memberDeposits, Member $member, $representative)
    {
        $entityManager = $this->getEntityManager();
        $ledgerBalanceDep = new GeneralLedgerBalance();
        $ledgerBalanceDep->setDebit($deposits);
        $ledgerBalanceDep->setCurrentUser($currentUser);
        $ledgerBalanceDep->setDateOperation($dateOperation);
        $latestEntryGBL = $entityManager->getRepository('ReportBundle:GeneralLedgerBalance')->findOneBy([],['id' => 'DESC']);
        if ($latestEntryGBL) {
            $ledgerBalanceDep->setBalance($latestEntryGBL->getBalance() + $deposits);
        }else{
            $ledgerBalanceDep->setBalance($deposits);
        }
        $ledgerBalanceDep->setTypeOperation(Operation::TYPE_CASH_IN);
        $ledgerBalanceDep->setAccount($memberDeposits);
        $ledgerBalanceDep->setRepresentative($representative);
        $ledgerBalanceDep->setAccountBalance($memberDeposits->getBalance());
        $ledgerBalanceDep->setAccountTitle($memberDeposits->getAccountName()." A/C ".$member->getMemberNumber());
        $ledgerBalanceDep->setMember($member);
        $entityManager->persist($ledgerBalanceDep);
    }

    /**
     * @param Utilisateur $currentUser
     * @param \DateTime $dateOperation
     * @param Member $member
     * @param $mainLoan
     * @param InternalAccount $normalLoan
     * @param $representative
     */
    public function saveMemberLoanOperation(Utilisateur $currentUser, \DateTime $dateOperation, Member $member, $mainLoan,InternalAccount $normalLoan, $representative)
    {
        $operationNormalLoan = new Operation();
        $operationNormalLoan->setCurrentUser($currentUser);
        $operationNormalLoan->setDateOperation($dateOperation);
        $operationNormalLoan->setTypeOperation(Operation::TYPE_CASH_IN);
        $operationNormalLoan->setAmount($mainLoan);
        $operationNormalLoan->setMember($member);
        $operationNormalLoan->setRepresentative($representative);
        $operationNormalLoan->setBalance($normalLoan->getBalance());
        $this->getEntityManager()->persist($operationNormalLoan);
    }

    /**
     * @param Utilisateur $currentUser
     * @param \DateTime $dateOperation
     * @param Member $member
     * @param $loanInterest
     * @param InternalAccount $LoanInterestAccount
     * @param $representative
     */
    public function saveMemberLoanInterestOperation(Utilisateur $currentUser, \DateTime $dateOperation, Member $member, $loanInterest,InternalAccount $LoanInterestAccount, $representative)
    {
        $operationLoanInterest = new Operation();
        $operationLoanInterest->setCurrentUser($currentUser);
        $operationLoanInterest->setDateOperation($dateOperation);
        $operationLoanInterest->setTypeOperation(Operation::TYPE_CASH_IN);
        $operationLoanInterest->setAmount($loanInterest);
        $operationLoanInterest->setMember($member);
        $operationLoanInterest->setRepresentative($representative);
        $operationLoanInterest->setBalance($LoanInterestAccount->getBalance());
        $this->getEntityManager()->persist($operationLoanInterest);
    }

    /**
     * @param $loanInterest
     * @param Utilisateur $currentUser
     * @param \DateTime $dateOperation
     * @param InternalAccount $loanInterestAcccount
     * @param Member $member
     * @param $representative
     */
    public function saveMemberLoanInterestInGeneralLedger($loanInterest, Utilisateur $currentUser, \DateTime $dateOperation, InternalAccount $loanInterestAcccount, Member $member, $representative)
    {
        $entityManager = $this->getEntityManager();
        $ledgerBalanceInterest = new GeneralLedgerBalance();
        $ledgerBalanceInterest->setDebit($loanInterest);
        $ledgerBalanceInterest->setCurrentUser($currentUser);
        $ledgerBalanceInterest->setDateOperation($dateOperation);
        $latestEntryGBL = $entityManager->getRepository('ReportBundle:GeneralLedgerBalance')->findOneBy([],['id' => 'DESC']);
        if ($latestEntryGBL) {
            $ledgerBalanceInterest->setBalance($latestEntryGBL->getBalance() + $loanInterest);
        }else{
            $ledgerBalanceInterest->setBalance($loanInterest);
        }
        $ledgerBalanceInterest->setTypeOperation(Operation::TYPE_CASH_IN);
        $ledgerBalanceInterest->setAccount($loanInterestAcccount);
        $ledgerBalanceInterest->setRepresentative($representative);
        $ledgerBalanceInterest->setAccountBalance($loanInterestAcccount->getBalance());
        $ledgerBalanceInterest->setAccountTitle($loanInterestAcccount->getAccountName()." A/C ".$member->getMemberNumber());
        $ledgerBalanceInterest->setMember($member);
        $entityManager->persist($ledgerBalanceInterest);
    }

    /**
     * @param $mainLoan
     * @param Utilisateur $currentUser
     * @param \DateTime $dateOperation
     * @param InternalAccount $normalLoan
     * @param Member $member
     * @param $representative
     */
    public function saveMemberLoanInGeneralLedger($mainLoan, Utilisateur $currentUser, \DateTime $dateOperation, InternalAccount $normalLoan, Member $member, $representative)
    {
        $entityManager = $this->getEntityManager();
        $ledgerBalanceLoan = new GeneralLedgerBalance();
        $ledgerBalanceLoan->setDebit($mainLoan);
        $ledgerBalanceLoan->setCurrentUser($currentUser);
        $ledgerBalanceLoan->setDateOperation($dateOperation);
        $latestEntryGBL = $entityManager->getRepository(GeneralLedgerBalance::class)->findOneBy([],['id' => 'DESC']);
        if ($latestEntryGBL) {
            $ledgerBalanceLoan->setBalance($latestEntryGBL->getBalance() + $mainLoan);
        }else{
            $ledgerBalanceLoan->setBalance($mainLoan);
        }
        $ledgerBalanceLoan->setAccount($normalLoan);
        $ledgerBalanceLoan->setTypeOperation(Operation::TYPE_CASH_IN);
        $ledgerBalanceLoan->setRepresentative($representative);
        $ledgerBalanceLoan->setAccountBalance($normalLoan->getBalance());
        $ledgerBalanceLoan->setAccountTitle($normalLoan->getAccountName()."_REPAYMENT A/C ".$member->getMemberNumber());
        $ledgerBalanceLoan->setMember($member);
        $entityManager->persist($ledgerBalanceLoan);
    }

    /**
     * @param Utilisateur $currentUser
     * @param \DateTime $dateOperation
     * @param Member $member
     * @param $charges
     * @param InternalAccount $chargesAccount
     * @param $representative
     */
    public function saveMemberChargesOperation(Utilisateur $currentUser, \DateTime $dateOperation, Member $member, $charges,InternalAccount $chargesAccount, $representative)
    {
        $operationCharges = new Operation();
        $operationCharges->setCurrentUser($currentUser);
        $operationCharges->setDateOperation($dateOperation);
        $operationCharges->setTypeOperation(Operation::TYPE_CASH_IN);
        $operationCharges->setAmount($charges);
        $operationCharges->setMember($member);
        $operationCharges->setRepresentative($representative);
        $operationCharges->setBalance($chargesAccount->getBalance());
        $this->getEntityManager()->persist($operationCharges);
    }

    /**
     * @param $charges
     * @param Utilisateur $currentUser
     * @param \DateTime $dateOperation
     * @param InternalAccount $chargesAccount
     * @param Member $member
     * @param $representative
     */
    public function saveMemberChargesInGeneralLedger($charges, Utilisateur $currentUser, \DateTime $dateOperation, InternalAccount $chargesAccount, Member $member, $representative)
    {
        $entityManager = $this->getEntityManager();
        $ledgerBalanceCharges = new GeneralLedgerBalance();
        $ledgerBalanceCharges->setDebit($charges);
        $ledgerBalanceCharges->setCurrentUser($currentUser);
        $ledgerBalanceCharges->setDateOperation($dateOperation);
        $latestEntryGBL = $entityManager->getRepository(GeneralLedgerBalance::class)->findOneBy([],['id' => 'DESC']);
        if ($latestEntryGBL) {
            $ledgerBalanceCharges->setBalance($latestEntryGBL->getBalance() + $charges);
        }else{
            $ledgerBalanceCharges->setBalance($charges);
        }
        $ledgerBalanceCharges->setTypeOperation(Operation::TYPE_CASH_IN);
        $ledgerBalanceCharges->setAccount($chargesAccount);
        $ledgerBalanceCharges->setRepresentative($representative);
        $ledgerBalanceCharges->setAccountBalance($chargesAccount->getBalance());
        $ledgerBalanceCharges->setAccountTitle($chargesAccount->getAccountName()."_ A/C_".$member->getMemberNumber());
        $ledgerBalanceCharges->setMember($member);
        $entityManager->persist($ledgerBalanceCharges);
    }

    /**
     * @param Utilisateur $currentUser
     * @param \DateTime $dateOperation
     * @param Member $member
     * @param $buildingFees
     * @param InternalAccount $feesAccount
     * @param $representative
     */
    public function saveMemberBuildingFeesOperation(Utilisateur $currentUser, \DateTime $dateOperation, Member $member, $buildingFees,InternalAccount $feesAccount, $representative)
    {
        $operationFees = new Operation();
        $operationFees->setCurrentUser($currentUser);
        $operationFees->setDateOperation($dateOperation);
        $operationFees->setTypeOperation(Operation::TYPE_CASH_IN);
        $operationFees->setAmount($buildingFees);
        $operationFees->setMember($member);
        $operationFees->setRepresentative($representative);
        $operationFees->setBalance($feesAccount->getBalance());
        $this->getEntityManager()->persist($operationFees);
    }

    /**
     * @param $buildingFees
     * @param Utilisateur $currentUser
     * @param \DateTime $dateOperation
     * @param InternalAccount $feesAccount
     * @param Member $member
     * @param $representative
     */
    public function saveMemberBuildingFeesInGeneralLedger($buildingFees, Utilisateur $currentUser, \DateTime $dateOperation, InternalAccount $feesAccount, Member $member, $representative)
    {
        $entityManager = $this->getEntityManager();
        $ledgerBalanceBuildingFees = new GeneralLedgerBalance();
        $ledgerBalanceBuildingFees->setDebit($buildingFees);
        $ledgerBalanceBuildingFees->setCurrentUser($currentUser);
        $ledgerBalanceBuildingFees->setDateOperation($dateOperation);
        $latestEntryGBL = $entityManager->getRepository(GeneralLedgerBalance::class)->findOneBy([],['id' => 'DESC']);
        if ($latestEntryGBL) {
            $ledgerBalanceBuildingFees->setBalance($latestEntryGBL->getBalance() + $buildingFees);
        }else{
            $ledgerBalanceBuildingFees->setBalance($buildingFees);
        }
        $ledgerBalanceBuildingFees->setAccount($feesAccount);
        $ledgerBalanceBuildingFees->setTypeOperation(Operation::TYPE_CASH_IN);
        $ledgerBalanceBuildingFees->setRepresentative($representative);
        $ledgerBalanceBuildingFees->setAccountBalance($feesAccount->getBalance());
        $ledgerBalanceBuildingFees->setAccountTitle($feesAccount->getAccountName()." A/C_".$member->getMemberNumber());
        $ledgerBalanceBuildingFees->setMember($member);
        $entityManager->persist($ledgerBalanceBuildingFees);
    }

    /**
     * @param Utilisateur $currentUser
     * @param \DateTime $dateOperation
     * @param Member $member
     * @param $registration
     * @param InternalAccount $memberEntranceFees
     * @param $representative
     */
    public function saveMemberRegistrationOperation(Utilisateur $currentUser, \DateTime $dateOperation, Member $member, $registration,InternalAccount $memberEntranceFees, $representative)
    {
        $operationRegistration = new Operation();
        $operationRegistration->setCurrentUser($currentUser);
        $operationRegistration->setDateOperation($dateOperation);
        $operationRegistration->setTypeOperation(Operation::TYPE_CASH_IN);
        $operationRegistration->setAmount($registration);
        $operationRegistration->setMember($member);
        $operationRegistration->setRepresentative($representative);
        $operationRegistration->setBalance($memberEntranceFees->getBalance());
        $this->getEntityManager()->persist($operationRegistration);
    }

    /**
     * @param $registration
     * @param Utilisateur $currentUser
     * @param \DateTime $dateOperation
     * @param InternalAccount $memberEntranceFees
     * @param Member $member
     * @param $representative
     */
    public function saveMemberRegistrationFeesInGeneralLedger($registration, Utilisateur $currentUser, \DateTime $dateOperation, InternalAccount $memberEntranceFees, Member $member, $representative)
    {
        $entityManager = $this->getEntityManager();
        $ledgerBalanceRegistration = new GeneralLedgerBalance();
        $ledgerBalanceRegistration->setDebit($registration);
        $ledgerBalanceRegistration->setCurrentUser($currentUser);
        $ledgerBalanceRegistration->setDateOperation($dateOperation);
        $latestEntryGBL = $entityManager->getRepository(GeneralLedgerBalance::class)->findOneBy([], ['id' => 'DESC']);
        if ($latestEntryGBL) {
            $ledgerBalanceRegistration->setBalance($latestEntryGBL->getBalance() + $registration);
        }else{
            $ledgerBalanceRegistration->setBalance($registration);
        }
        $ledgerBalanceRegistration->setTypeOperation(Operation::TYPE_CASH_IN);
        $ledgerBalanceRegistration->setAccount($memberEntranceFees);
        $ledgerBalanceRegistration->setRepresentative($representative);

        $ledgerBalanceRegistration->setAccountBalance($memberEntranceFees->getBalance());
        $ledgerBalanceRegistration->setAccountTitle($memberEntranceFees->getAccountName()." A/C_".$member->getMemberNumber());
        $ledgerBalanceRegistration->setMember($member);
        $entityManager->persist($ledgerBalanceRegistration);
    }
}
